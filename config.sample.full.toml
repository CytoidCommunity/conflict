# This is the configuration example of Tairitsuru.
# It contains the detailed explaintion. If you feel it's too complex, 
# have a look at `tairitsuru_conf.vaild.toml`.

# Tairitsuru uses TOML (Tom's Obvious, Minimal Language) as its configuration
# language. See <https://github.com/toml-lang/toml> for its specification.


## START EXAMPLE

# transcoding: I've heard that you love mp4.
[transcoding]
# By default, the livestream is ".flv" file.
# You can choose to transcode it to other formarts without changing
# its encoder using ffmpeg. Relax - It's really fast!
enable = false
#formart = "mp4" # You may want to use "mkv" instead. 


# stroage: Where is my data?
[storage]
# Available type: local, s3 (Object Storage)
type = "local"

[storage.local]
path = "./data" 

#[storage.s3]
#cache = /tmp  # Set it to another place if you use tmpfs!
#
# I don't think I need to explain the following things if you use Object
# Storage.
#
#endpoint = "https://example.someservice.com/"
#bucket = "tairitsuru"
#access_key = "************"
#access_secret = "************"
#addressing_style = "auto" # If you don't know, just leave it "auto".


# proxy: The usage of proxies.
# Bilibili's API bans the requests from most cloud computing platforms.
# We may bypass this restriction by using a proxy.
#[proxy]

# Available scheme: http, https (socks5 not supported yet)
#url = "http://localhost:1081/"


# push: Message pushing.
[push]

[push.default]
# Push Message
#
# This is the default template for message pushing.
# You can override it in [[push.methods]]
#
# Remember the following points:
# - You can use data returned by bilibili api.
#   {room[...]...} stand for result of `get_room_info`,
#   {user[...]...} stand for result of `get_user_info`.
#   e.g. {room[user_cover]} will be replaced by cover image url.
#        {user[info][uname]} will be replaced by user name.
# - Of course some common components are pre-defined.
#   Here are them:
#  * The following components are available in both `live_start` and `live_end`
#    {uid}: alias for {room[uid]} and/or {user[info][uid]}
#    {room_id}: alias for {room[room_id]}
#    {live_title}: alias for {room[title]}
#    {cover}: alias for {room[user_cover]}
#    {background}: alias for {room[background]}
#    {user_name}: alias for {user[info][uname]}
#                 (will be replaced by `nickname` if set)
#    {user_face}: alias for {user[info][face]}
#    {san}: alias for {user[san]}
#  * The following components are available in `live_end`:
#    {duration}
#    {filename}
# - As a reminder, If you use normal strings (which uses `"` but not `'`)
#   to write the message, be careful with `\`.
#
live_start = """
🌟tairitsuru: {user_name} 开始直播 {live_title}啦, \
快去让TA发光吧! 直播间地址: https://live.bilibili.com/{room_id}
"""
live_end = "🌟tairitsuru: {uploader} 直播结束, 总时长 {live_duration}."
# TODO: notify for new video

[[push.methods]]
# An unique identifier. It will be used later.
id = "mirai"

# Available types: cqhttp, mirai, telegram
# QQ HOO!K Support might be added later.
type = "mirai" # Mirai API HTTP (https://github.com/mamoe/mirai-api-http)
api_root = "http://127.0.0.1:8080/"
auth_key = "************" # authKey in Mirai API HTTP's configruation
qq = 123456789 # Your bot's QQ
users = [123456789, 987654321]
groups = [123456789, 987654321]

# Message template overriding.
# In this example, we use Mirai API HTTP's message chain

live_start = [
    { type = "Image", url = "{cover}" },
    { type = "Plain", text = "🌟tairitsuru: {user_name} 开始直播 {live_title} 啦, 快去让TA发光吧! 直播间地址: https://live.bilibili.com/{room_id}" }
]

[[push.methods]]
id = "tg"

# Telegram API
type = "telegram"
addr = "https://api.telegram.org/"
auth = "************" # token in Telegram's @BotFather
users = ["123456789", "987654321"]


# --- Now comes the most important part! ---
# watchers: Who do you want to watch?
# Let's take Tira_Official (uid: 3234445, roomid: 22114797) for example.
[[watchers]]
# Optionally, give him a nickname.
nickname = "Tix"

# Set the interval between two checks for new events. (Default: 60 seconds)
# Don't set it to less than 60s, or you may be banned by Bilibili.
interval = 60

# Use notification template.
push = ["mirai", "tg"]

[watchers.video]
# You MUST set a uid.
uid = 3234445
# Enable notifing for his new video.
notify = true

# Livestream Related Part
[watchers.live]
# If you want to use live related features, you should set a roomid.
roomid = 22114797
# Enable notifing for his livestream.
notify = true
# Do not miss any livestream! Let's record it.
capture = true


# Add more watchers!
#[[watchers]]
#[watchers.video]
#uid = 123456
#[watchers.live]
#roomid = 654321
#notify = true
#capture = false

#...

## END EXAMPLE